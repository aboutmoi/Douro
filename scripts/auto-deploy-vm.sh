#!/bin/bash
set -e

# Script de d√©ploiement automatique Douro pour VM
# Usage: ./scripts/auto-deploy-vm.sh

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# Variables
VM_IP="192.168.1.40"
VM_USER="grafana"
PROJECT_DIR="/home/grafana/douro"

echo -e "${BLUE}================================${NC}"
echo -e "${BLUE}  DOURO - D√âPLOIEMENT AUTOMATIQUE${NC}"
echo -e "${BLUE}  VM: $VM_IP${NC}"
echo -e "${BLUE}  User: $VM_USER${NC}"
echo -e "${BLUE}================================${NC}"

# Fonction de log
log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

log_warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] WARNING: $1${NC}"
}

log_error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR: $1${NC}"
}

# V√©rifier si on est sur la VM ou sur la machine locale
if [[ $(hostname -I | grep -c "192.168.1.40") -gt 0 ]] || [[ "$1" == "--local" ]]; then
    echo -e "${GREEN}Ex√©cution locale sur la VM${NC}"
    LOCAL_INSTALL=true
else
    log_error "Ce script doit √™tre ex√©cut√© directement sur la VM"
    log "Copiez ce script sur votre VM et ex√©cutez-le l√†-bas :"
    log "scp scripts/auto-deploy-vm.sh grafana@192.168.1.40:/home/grafana/"
    log "ssh grafana@192.168.1.40"
    log "chmod +x auto-deploy-vm.sh"
    log "./auto-deploy-vm.sh --local"
    exit 1
fi

# V√©rification des privil√®ges sudo
check_sudo() {
    log "V√©rification des privil√®ges sudo..."
    if sudo -n true 2>/dev/null; then
        log "‚úì Privil√®ges sudo OK"
    else
        log_warn "Configuration sudo n√©cessaire..."
        log "Ex√©cution de: sudo -v"
        sudo -v
    fi
}

# Installation des d√©pendances syst√®me
install_dependencies() {
    log "Installation des d√©pendances syst√®me..."
    
    # D√©tecter la distribution
    if command -v apt-get &> /dev/null; then
        PACKAGE_MANAGER="apt"
        log "Distribution: Ubuntu/Debian d√©tect√©e"
        sudo apt update
        sudo apt install -y python3 python3-venv python3-pip curl make git jq
    elif command -v yum &> /dev/null; then
        PACKAGE_MANAGER="yum"
        log "Distribution: CentOS/RHEL d√©tect√©e"
        sudo yum update -y
        sudo yum install -y python3 python3-pip curl make git jq
    else
        log_error "Gestionnaire de paquets non support√©"
        exit 1
    fi
    
    log "‚úì D√©pendances install√©es"
}

# V√©rifier si douro est d√©j√† dans le r√©pertoire courant
check_douro_files() {
    log "V√©rification des fichiers Douro..."
    
    if [[ -f "Makefile" ]] && [[ -f "requirements.txt" ]] && [[ -d "douro" ]]; then
        log "‚úì Fichiers Douro d√©tect√©s dans le r√©pertoire courant"
        DOURO_DIR="."
    elif [[ -f "/home/grafana/douro/Makefile" ]]; then
        log "‚úì Fichiers Douro trouv√©s dans /home/grafana/douro"
        DOURO_DIR="/home/grafana/douro"
        cd "$DOURO_DIR"
    else
        log_error "Fichiers Douro non trouv√©s !"
        log "Assurez-vous que les fichiers sont dans le r√©pertoire courant ou dans /home/grafana/douro"
        log "Structure attendue :"
        log "  - Makefile"
        log "  - requirements.txt"
        log "  - douro/ (dossier)"
        log "  - systemd/ (dossier)"
        log "  - scripts/ (dossier)"
        exit 1
    fi
}

# Installation compl√®te de Douro
install_douro() {
    log "Installation de Douro..."
    
    # Rendre les scripts ex√©cutables
    chmod +x scripts/*.sh 2>/dev/null || true
    
    # Installation du service systemd et utilisateur douro
    log "√âtape 1/4: Installation du service systemd..."
    sudo make service-install
    
    # D√©ploiement du code
    log "√âtape 2/4: D√©ploiement du code..."
    make deploy
    
    # Configuration par d√©faut (vous pourrez la modifier apr√®s)
    log "√âtape 3/4: Configuration par d√©faut..."
    configure_default_domains
    
    # Validation de la configuration
    log "Validation de la configuration..."
    make check-config
    
    # D√©marrage du service
    log "√âtape 4/4: D√©marrage du service..."
    make service-start
    
    log "‚úì Installation de Douro termin√©e"
}

# Configuration des domaines par d√©faut
configure_default_domains() {
    log "Configuration des domaines par d√©faut..."
    
    # Cr√©er une configuration de base
    sudo tee /opt/douro/config.production.json > /dev/null << 'EOF'
{
  "exporter": {
    "port": 9105,
    "interval_seconds": 300,
    "timeout_seconds": 15
  },
  "domains": [
    {
      "name": "google.com",
      "enabled": true,
      "description": "Test domain - Google"
    },
    {
      "name": "github.com",
      "enabled": true,
      "description": "Test domain - GitHub"
    },
    {
      "name": "stackoverflow.com",
      "enabled": true,
      "description": "Test domain - StackOverflow"
    }
  ],
  "monitoring": {
    "log_level": "INFO",
    "enable_verbose_logging": false
  }
}
EOF
    
    sudo chown douro:douro /opt/douro/config.production.json
    log "‚úì Configuration par d√©faut cr√©√©e"
}

# Configuration du firewall
configure_firewall() {
    log "Configuration du firewall..."
    
    if command -v ufw &> /dev/null; then
        sudo ufw allow 9105/tcp comment "Douro Prometheus metrics"
        sudo ufw allow 9106/tcp comment "Douro health check"
        log "‚úì Firewall UFW configur√©"
    elif command -v firewall-cmd &> /dev/null; then
        sudo firewall-cmd --permanent --add-port=9105/tcp
        sudo firewall-cmd --permanent --add-port=9106/tcp
        sudo firewall-cmd --reload
        log "‚úì Firewall firewalld configur√©"
    else
        log_warn "Aucun firewall d√©tect√©, configuration manuelle n√©cessaire"
    fi
}

# Tests de fonctionnement
run_tests() {
    log "Tests de fonctionnement..."
    
    # Attendre que le service soit pr√™t
    log "Attente du d√©marrage du service..."
    sleep 10
    
    # Test de statut du service
    if sudo systemctl is-active --quiet douro; then
        log "‚úì Service douro actif"
    else
        log_error "‚úó Service douro inactif"
        sudo systemctl status douro --no-pager -l
        return 1
    fi
    
    # Test des endpoints
    log "Test des endpoints..."
    
    local max_attempts=30
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        if curl -s http://localhost:9106/ready >/dev/null 2>&1; then
            log "‚úì Service pr√™t !"
            break
        fi
        
        if [[ $attempt -eq $max_attempts ]]; then
            log_error "‚úó Service non pr√™t apr√®s $max_attempts tentatives"
            return 1
        fi
        
        log "Tentative $attempt/$max_attempts..."
        sleep 2
        ((attempt++))
    done
    
    # Tests des endpoints
    if curl -s http://localhost:9105/metrics | head -5 >/dev/null; then
        log "‚úì Endpoint m√©triques OK"
    else
        log_warn "‚úó Endpoint m√©triques KO"
    fi
    
    if curl -s http://localhost:9106/health >/dev/null; then
        log "‚úì Endpoint health OK"
    else
        log_warn "‚úó Endpoint health KO"
    fi
}

# Affichage du r√©sum√© final
show_summary() {
    echo -e "\n${BLUE}================================${NC}"
    echo -e "${BLUE}   INSTALLATION TERMIN√âE !${NC}"
    echo -e "${BLUE}================================${NC}"
    
    echo -e "\n${GREEN}üéØ Service Douro install√© et actif${NC}"
    echo -e "${GREEN}üìä Utilisateur 'douro' cr√©√©${NC}"
    echo -e "${GREEN}üîß Service systemd configur√©${NC}"
    
    echo -e "\n${YELLOW}üì° URLs de monitoring :${NC}"
    echo -e "  ‚Ä¢ M√©triques Prometheus: ${BLUE}http://192.168.1.40:9105/metrics${NC}"
    echo -e "  ‚Ä¢ Health check:         ${BLUE}http://192.168.1.40:9106/health${NC}"
    echo -e "  ‚Ä¢ Readiness probe:      ${BLUE}http://192.168.1.40:9106/ready${NC}"
    echo -e "  ‚Ä¢ Liveness probe:       ${BLUE}http://192.168.1.40:9106/live${NC}"
    
    echo -e "\n${YELLOW}üîß Commandes utiles :${NC}"
    echo -e "  ‚Ä¢ Statut:     ${BLUE}sudo systemctl status douro${NC}"
    echo -e "  ‚Ä¢ Logs:       ${BLUE}sudo journalctl -u douro -f${NC}"
    echo -e "  ‚Ä¢ Red√©marrer: ${BLUE}sudo systemctl restart douro${NC}"
    echo -e "  ‚Ä¢ Health:     ${BLUE}curl http://localhost:9106/health${NC}"
    
    echo -e "\n${YELLOW}üìù Configuration :${NC}"
    echo -e "  ‚Ä¢ Fichier config: ${BLUE}/opt/douro/config.production.json${NC}"
    echo -e "  ‚Ä¢ Logs:          ${BLUE}/var/log/douro/douro.log${NC}"
    echo -e "  ‚Ä¢ Code source:   ${BLUE}/opt/douro/douro/${NC}"
    
    echo -e "\n${GREEN}‚úÖ Pour configurer vos domaines :${NC}"
    echo -e "   ${BLUE}sudo nano /opt/douro/config.production.json${NC}"
    echo -e "   ${BLUE}sudo systemctl restart douro${NC}"
    
    echo -e "\n${BLUE}================================${NC}"
}

# Fonction principale
main() {
    log "D√©marrage de l'installation automatique de Douro..."
    
    check_sudo
    install_dependencies
    check_douro_files
    install_douro
    configure_firewall
    run_tests
    show_summary
    
    log "üéâ Installation compl√®te termin√©e avec succ√®s !"
}

# Gestion des erreurs
trap 'log_error "Installation interrompue ! V√©rifiez les logs ci-dessus."' ERR

# Ex√©cution
main "$@" 